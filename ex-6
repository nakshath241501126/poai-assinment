# Facts: The knowledge base containing information about facts
facts = {
    'a': True,
    'b': True,
    'c': False
}

# Rules: List of rules where each rule is a tuple (conclusion, conditions)
rules = [
    ('d', ['a', 'b']),  # d can be concluded if a and b are true
    ('e', ['b', 'c']),  # e can be concluded if b and c are true
    ('f', ['d', 'e'])   # f can be concluded if d and e are true
]

# Backward Chaining Function
def backward_chaining(goal, facts, rules):
    """Check if the goal can be derived using backward chaining."""
    
    # If the goal is a known fact, return its truth value
    if goal in facts:
        return facts[goal]
    
    # Attempt to prove the goal using applicable rules
    for head, body in rules:
        if head == goal:
            # Verify if all conditions in the body are true recursively
            if all(backward_chaining(condition, facts, rules) for condition in body):
                return True

    # If no rule supports deriving the goal, return False
    return False

# Example Usage:
goal = 'f'

if backward_chaining(goal, facts, rules):
    print(f"The goal '{goal}' can be achieved.")
else:
    print(f"The goal '{goal}' cannot be achieved.")
