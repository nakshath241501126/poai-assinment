class Graph:
    def __init__(self, vertices):
        self.vertices = vertices
        self.graph = {i: [] for i in range(vertices)}

    def add_edge(self, u, v):
        self.graph[u].append(v)
        self.graph[v].append(u)

    def dfs(self, v, visited):
        print(v, end=" ")
        visited[v] = True
        for neighbor in self.graph[v]:
            if not visited[neighbor]:
                self.dfs(neighbor, visited)

def depth_first_search():
    vertices = int(input("Enter the number of vertices: "))
    g = Graph(vertices)
    edges = int(input("Enter the number of edges: "))
    print("Enter the edges (e.g., 'u v' where u and v are vertices):")
    for _ in range(edges):
        u, v = map(int, input().split())
        g.add_edge(u, v)
    visited = [False] * g.vertices
    start_vertex = int(input("Enter the starting vertex for DFS: "))
    print("Depth First Search starting from vertex {}:".format(start_vertex))
    g.dfs(start_vertex, visited)

depth_first_search()
